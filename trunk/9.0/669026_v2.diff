diff --git a/editor/libeditor/html/tests/test_bug549262.html b/editor/libeditor/html/tests/test_bug549262.html
--- a/editor/libeditor/html/tests/test_bug549262.html
+++ b/editor/libeditor/html/tests/test_bug549262.html
@@ -16,17 +16,17 @@
 </div>
 <pre id="test">
 <script type="application/javascript">
 
 /** Test for Bug 549262 **/
 
 SimpleTest.waitForExplicitFinish();
 var win = window.open("file_bug549262.html", "_blank", 
-                      "width=600,height=600");
+                      "width=600,height=600,scrollbars=yes");
 SimpleTest.waitForFocus(function() {
   // Make sure that pressing Space when a contenteditable element is not focused
   // will scroll the page.
   var ed = win.document.getElementById("editor");
   var sc = win.document.querySelector("a");
   sc.focus();
   is(win.scrollY, 0, "Sanity check");
   synthesizeKey(" ", {}, win);
@@ -53,18 +53,54 @@
           is(ed.textContent, "a bc", "The content of the editable element has not changed");
           ed.focus();
           win.getSelection().collapse(ed.firstChild, 3);
           synthesizeKey(" ", {shiftKey: true}, win);
           setTimeout(function() {
             isnot(win.scrollY, 0, "Page is not scrolled up");
             is(ed.textContent, "a b c", "The content of the editable element has changed");
 
-            win.close();
-            SimpleTest.finish();
+            // Now let's test the down/up keys
+            sc = document.body;
+            setTimeout(function() {
+              ed.blur();
+              sc.focus();
+              var oldY = win.scrollY;
+              synthesizeKey("VK_UP", {}, win);
+              setTimeout(function() {
+                ok(win.scrollY < oldY, "Page is scrolled up");
+                oldY = win.scrollY;
+                ed.focus();
+                win.getSelection().collapse(ed.firstChild, 3);
+                synthesizeKey("VK_UP", {}, win);
+                setTimeout(function() {
+                  is(win.scrollY, oldY, "Page is not scrolled up");
+                  is(win.getSelection().focusNode, ed.firstChild, "Correct element selected");
+                  is(win.getSelection().focusOffset, 0, "Selection should be moved to the beginning");
+                  win.getSelection().removeAllRanges();
+                  synthesizeMouse(sc, 300, 300, {}, win);
+                  synthesizeKey("VK_DOWN", {}, win);
+                  setTimeout(function() {
+                    ok(win.scrollY > oldY, "Page is scrolled down");
+                    ed.focus();
+                    win.getSelection().collapse(ed.firstChild, 3);
+                    oldY = win.scrollY;
+                    synthesizeKey("VK_DOWN", {}, win);
+                    setTimeout(function() {
+                      is(win.scrollY, oldY, "Page is not scrolled down");
+                      is(win.getSelection().focusNode, ed.firstChild, "Correct element selected");
+                      is(win.getSelection().focusOffset, ed.textContent.length, "Selection should be moved to the end");
+
+                      win.close();
+                      SimpleTest.finish();
+                    }, 0);
+                  }, 0);
+                }, 0);
+              }, 0);
+            }, 0);
           }, 0);
         }, 0);
       }, 0);
     }, 0);
   }, 0);
 }, win);
 
 </script>
diff --git a/content/xbl/builtin/browser-base.inc b/content/xbl/builtin/browser-base.inc
--- a/content/xbl/builtin/browser-base.inc	2011-12-21 07:28:13.000000000 +0800
+++ b/content/xbl/builtin/browser-base.inc	2011-12-30 23:03:00.000000000 +0800
@@ -1,10 +1,10 @@
       <handler event="keypress" key=" " modifiers="shift" command="cmd_scrollPageUp" />
       <handler event="keypress" key=" " command="cmd_scrollPageDown" />
 
-      <handler event="keypress" keycode="VK_UP" command="cmd_scrollLineUp" />
-      <handler event="keypress" keycode="VK_DOWN" command="cmd_scrollLineDown" />
-      <handler event="keypress" keycode="VK_LEFT" command="cmd_scrollLeft" />
-      <handler event="keypress" keycode="VK_RIGHT" command="cmd_scrollRight" />
+      <handler event="keypress" keycode="VK_UP" command="cmd_linePrevious" />
+      <handler event="keypress" keycode="VK_DOWN" command="cmd_lineNext" />
+     <handler event="keypress" keycode="VK_LEFT" command="cmd_charPrevious" />
+     <handler event="keypress" keycode="VK_RIGHT" command="cmd_charNext" />
 
       <handler event="keypress" key="x" command="cmd_cut" modifiers="accel"/>
       <handler event="keypress" key="c" command="cmd_copy" modifiers="accel"/>
diff --git a/editor/composer/src/nsEditingSession.cpp b/editor/composer/src/nsEditingSession.cpp
--- a/editor/composer/src/nsEditingSession.cpp	2011-12-21 07:28:16.000000000 +0800
+++ b/editor/composer/src/nsEditingSession.cpp	2011-12-30 23:17:35.000000000 +0800
@@ -184,8 +184,8 @@
 
   // Setup commands common to plaintext and html editors,
   //  including the document creation observers
-  // the first is an editor controller
-  rv = SetupEditorCommandController("@mozilla.org/editor/editorcontroller;1",
+  // the first is an editing controller
+  rv = SetupEditorCommandController("@mozilla.org/editor/editingcontroller;1",
                                     aWindow,
                                     static_cast<nsIEditingSession*>(this),
                                     &mBaseCommandControllerId);
@@ -1434,7 +1434,7 @@
   NS_ENSURE_SUCCESS(rv, rv);
 
   // Setup the command controllers again.
-  rv = SetupEditorCommandController("@mozilla.org/editor/editorcontroller;1",
+rv = SetupEditorCommandController("@mozilla.org/editor/editingcontroller;1",
                                     aWindow,
                                     static_cast<nsIEditingSession*>(this),
                                     &mBaseCommandControllerId);
diff --git a/editor/libeditor/base/nsEditorController.cpp b/editor/libeditor/base/nsEditorController.cpp
--- a/editor/libeditor/base/nsEditorController.cpp	2011-12-21 07:28:16.000000000 +0800
+++ b/editor/libeditor/base/nsEditorController.cpp	2011-12-30 23:19:18.000000000 +0800
@@ -71,7 +71,7 @@
 
 
 // static
-nsresult nsEditorController::RegisterEditorCommands(nsIControllerCommandTable *inCommandTable)
+nsresult nsEditorController::RegisterEditingCommands(nsIControllerCommandTable *inCommandTable)
 {
   nsresult rv;
  
@@ -101,6 +101,21 @@
   NS_REGISTER_NEXT_COMMAND(nsDeleteCommand, "cmd_deleteToBeginningOfLine");
   NS_REGISTER_LAST_COMMAND(nsDeleteCommand, "cmd_deleteToEndOfLine");
 
+  // Insert content
+		NS_REGISTER_ONE_COMMAND(nsInsertPlaintextCommand, "cmd_insertText");
+		NS_REGISTER_ONE_COMMAND(nsPasteQuotationCommand, "cmd_pasteQuote");
+		 
+		return NS_OK;
+		}
+		 
+		 
+		// static
+		nsresult nsEditorController::RegisterEditorCommands(nsIControllerCommandTable *inCommandTable)
+		{
+		nsresult rv;
+		 
+		// These are commands that will be used in text widgets only.
+
   NS_REGISTER_FIRST_COMMAND(nsSelectionMoveCommands, "cmd_scrollTop");
   NS_REGISTER_NEXT_COMMAND(nsSelectionMoveCommands, "cmd_scrollBottom");
   NS_REGISTER_NEXT_COMMAND(nsSelectionMoveCommands, "cmd_moveTop");
@@ -132,10 +147,6 @@
   NS_REGISTER_NEXT_COMMAND(nsSelectionMoveCommands, "cmd_selectPageUp");
   NS_REGISTER_LAST_COMMAND(nsSelectionMoveCommands, "cmd_selectPageDown");
     
-  // Insert content
-  NS_REGISTER_ONE_COMMAND(nsInsertPlaintextCommand, "cmd_insertText");
-  NS_REGISTER_ONE_COMMAND(nsPasteQuotationCommand,  "cmd_pasteQuote");
-
 
   return NS_OK;
 }
diff --git a/editor/libeditor/base/nsEditorController.h b/editor/libeditor/base/nsEditorController.h
--- a/editor/libeditor/base/nsEditorController.h	2011-12-21 07:28:16.000000000 +0800
+++ b/editor/libeditor/base/nsEditorController.h	2011-12-30 23:19:48.000000000 +0800
@@ -41,6 +41,9 @@
 #define NS_EDITORCONTROLLER_CID \
 { 0x26fb965c, 0x9de6, 0x11d3, { 0xbc, 0xcc, 0x0, 0x60, 0xb0, 0xfc, 0x76, 0xbd } }
 
+#define NS_EDITINGCONTROLLER_CID \
+		{ 0x2c5a5cdd, 0xe742, 0x4dfe, { 0x86, 0xb8, 0x06, 0x93, 0x09, 0xbf, 0x6c, 0x91 } }
+
 class nsIControllerCommandTable;
 
 
@@ -51,6 +54,7 @@
 {
 public:
   static nsresult RegisterEditorCommands(nsIControllerCommandTable* inCommandTable);
+static nsresult RegisterEditingCommands(nsIControllerCommandTable* inCommandTable);
 };
 
 #endif /* nsEditorController_h__ */
diff --git a/dom/base/nsFocusManager.cpp b/dom/base/nsFocusManager.cpp
--- a/dom/base/nsFocusManager.cpp	2011-12-21 07:28:14.000000000 +0800
+++ b/dom/base/nsFocusManager.cpp	2011-12-30 23:05:58.000000000 +0800
@@ -2411,14 +2411,13 @@
         if (startContent == rootContent) {
           startContent = nsnull;
         }
-        else if (startContent && startContent->HasFlag(NODE_IS_EDITABLE)) {
+  //      else if (startContent && startContent->HasFlag(NODE_IS_EDITABLE)) {
           // Don't start from the selection if the selection is in a
           // contentEditable region.
-          nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(doc);
-          if (htmlDoc &&
-              htmlDoc->GetEditingState() == nsIHTMLDocument::eContentEditable)
-            startContent = nsnull;
-        }
+		//   nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(doc);
+	//	     if (htmlDoc && htmlDoc->GetEditingState() == nsIHTMLDocument::eContentEditable)
+      //      startContent = nsnull;
+      //  }
 
         if (aType == MOVEFOCUS_CARET) {
           // GetFocusInSelection finds a focusable link near the caret.
diff --git a/dom/base/nsGlobalWindowCommands.cpp b/dom/base/nsGlobalWindowCommands.cpp
--- a/dom/base/nsGlobalWindowCommands.cpp	2011-12-21 07:28:14.000000000 +0800
+++ b/dom/base/nsGlobalWindowCommands.cpp	2011-12-30 23:14:53.000000000 +0800
@@ -76,12 +76,18 @@
 const char * const sScrollBottomString = "cmd_scrollBottom";
 const char * const sScrollPageUpString = "cmd_scrollPageUp";
 const char * const sScrollPageDownString = "cmd_scrollPageDown";
+const char * const sMoveTopString = "cmd_moveTop";
+const char * const sMoveBottomString = "cmd_moveBottom";
 const char * const sMovePageUpString = "cmd_movePageUp";
 const char * const sMovePageDownString = "cmd_movePageDown";
-const char * const sScrollLineUpString = "cmd_scrollLineUp";
-const char * const sScrollLineDownString = "cmd_scrollLineDown";
-const char * const sScrollLeftString = "cmd_scrollLeft";
-const char * const sScrollRightString = "cmd_scrollRight";
+//const char * const sScrollLineUpString = "cmd_scrollLineUp";
+const char * const sLinePreviousString = "cmd_linePrevious";
+//const char * const sScrollLineDownString = "cmd_scrollLineDown";
+const char * const sLineNextString = "cmd_lineNext";
+//const char * const sScrollLeftString = "cmd_scrollLeft";
+const char * const sCharPreviousString = "cmd_charPrevious";
+//const char * const sScrollRightString = "cmd_scrollRight";
+const char * const sCharNextString = "cmd_charNext";
 
 // These are so the browser can use editor navigation key bindings
 // helps with accessibility (boolean pref accessibility.browsewithcaret)
@@ -102,8 +108,10 @@
 const char * const sSelectLinePreviousString = "cmd_selectLinePrevious";
 const char * const sSelectLineNextString = "cmd_selectLineNext";
 
-const char * const sSelectPagePreviousString = "cmd_selectPagePrevious";
-const char * const sSelectPageNextString = "cmd_selectPageNext";
+//const char * const sSelectPagePreviousString = "cmd_selectPagePrevious";
+const char * const sSelectPageUpString = "cmd_selectPageUp";
+//const char * const sSelectPageNextString = "cmd_selectPageNext";
+const char * const sSelectPageDownString = "cmd_selectPageDown";
 
 const char * const sSelectTopString = "cmd_selectTop";
 const char * const sSelectBottomString = "cmd_selectBottom";
@@ -277,10 +285,18 @@
 {
   nsresult rv = NS_ERROR_NOT_IMPLEMENTED;
 
-  if (!nsCRT::strcmp(aCommandName, sScrollTopString))
+// cmd_MoveTop/Bottom are used on Window/Unix. They move the caret
+		// in caret browsing mode.
+		if (!nsCRT::strcmp(aCommandName, sMoveTopString))
     rv = aSelectionController->CompleteMove(PR_FALSE, PR_FALSE);
+		else if (!nsCRT::strcmp(aCommandName,sMoveBottomString))
+		rv = aSelectionController->CompleteMove(PR_TRUE, PR_FALSE);
+		// cmd_ScrollTop/Bottom are used on Mac. They do not move the
+		// caret in caret browsing mode.
+		else if (!nsCRT::strcmp(aCommandName, sScrollTopString))
+		rv = aSelectionController->CompleteScroll(PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName,sScrollBottomString))
-    rv = aSelectionController->CompleteMove(PR_TRUE, PR_FALSE);
+   rv = aSelectionController->CompleteScroll(PR_TRUE);
   // cmd_MovePageUp/Down are used on Window/Unix. They move the caret
   // in caret browsing mode.
   else if (!nsCRT::strcmp(aCommandName, sMovePageUpString))
@@ -293,17 +309,17 @@
     rv = aSelectionController->ScrollPage(PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName, sScrollPageDownString))
     rv = aSelectionController->ScrollPage(PR_TRUE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollLineUpString))
+ else if (!nsCRT::strcmp(aCommandName, sLinePreviousString))
     rv = aSelectionController->LineMove(PR_FALSE, PR_FALSE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollLineDownString))
+else if (!nsCRT::strcmp(aCommandName, sLineNextString))
     rv = aSelectionController->LineMove(PR_TRUE, PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName, sWordPreviousString))
     rv = aSelectionController->WordMove(PR_FALSE, PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName, sWordNextString))
     rv = aSelectionController->WordMove(PR_TRUE, PR_FALSE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollLeftString))
+  else if (!nsCRT::strcmp(aCommandName, sCharPreviousString))
     rv = aSelectionController->CharacterMove(PR_FALSE, PR_FALSE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollRightString))
+  else if (!nsCRT::strcmp(aCommandName, sCharNextString))
     rv = aSelectionController->CharacterMove(PR_TRUE, PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName, sBeginLineString))
     rv = aSelectionController->IntraLineMove(PR_FALSE, PR_FALSE);
@@ -330,7 +346,15 @@
 {
   nsresult rv = NS_ERROR_NOT_IMPLEMENTED;
 
-  if (!nsCRT::strcmp(aCommandName, sScrollTopString))   
+// cmd_MoveTop/Bottom are used on Window/Unix. They move the caret
+		// in caret browsing mode.
+		if (!nsCRT::strcmp(aCommandName, sMoveTopString))
+		rv = aSelectionController->CompleteScroll(PR_FALSE);
+		else if (!nsCRT::strcmp(aCommandName,sMoveBottomString))
+		rv = aSelectionController->CompleteScroll(PR_TRUE);
+		// cmd_ScrollTop/Bottom are used on Mac. They do not move the
+		// caret in caret browsing mode.
+		else if (!nsCRT::strcmp(aCommandName, sScrollTopString))
     rv = aSelectionController->CompleteScroll(PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName,sScrollBottomString))
     rv = aSelectionController->CompleteScroll(PR_TRUE);
@@ -348,16 +372,16 @@
   else if (!nsCRT::strcmp(aCommandName, sScrollPageDownString))
     rv = aSelectionController->ScrollPage(PR_TRUE);
 
-  else if (!nsCRT::strcmp(aCommandName, sScrollLineUpString))
+else if (!nsCRT::strcmp(aCommandName, sLinePreviousString))
     rv = aSelectionController->ScrollLine(PR_FALSE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollLineDownString))
+else if (!nsCRT::strcmp(aCommandName, sLineNextString))
     rv = aSelectionController->ScrollLine(PR_TRUE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollLeftString))
+ else if (!nsCRT::strcmp(aCommandName, sCharPreviousString))
     rv = aSelectionController->ScrollHorizontal(PR_TRUE);
-  else if (!nsCRT::strcmp(aCommandName, sScrollRightString))
+else if (!nsCRT::strcmp(aCommandName, sCharNextString))
     rv = aSelectionController->ScrollHorizontal(PR_FALSE);
   // cmd_beginLine/endLine with caret browsing off
-  // will act as cmd_scrollTop/Bottom
+  // will act as cmd_moveTop/Bottom
   else if (!nsCRT::strcmp(aCommandName, sBeginLineString))
     rv = aSelectionController->CompleteScroll(PR_FALSE);
   else if (!nsCRT::strcmp(aCommandName, sEndLineString))
@@ -398,6 +422,10 @@
     rv = selCont->LineMove(PR_FALSE, PR_TRUE);
   else if (!nsCRT::strcmp(aCommandName, sSelectLineNextString))
     rv = selCont->LineMove(PR_TRUE, PR_TRUE);
+  else if (!nsCRT::strcmp(aCommandName, sSelectPageUpString))
+		rv = selCont->PageMove(PR_FALSE, PR_TRUE);
+		else if (!nsCRT::strcmp(aCommandName, sSelectPageDownString))
+		rv = selCont->PageMove(PR_TRUE, PR_TRUE);
   else if (!nsCRT::strcmp(aCommandName, sSelectTopString))
     rv = selCont->CompleteMove(PR_FALSE, PR_TRUE);
   else if (!nsCRT::strcmp(aCommandName, sSelectBottomString))
@@ -946,6 +974,8 @@
   // this set of commands is affected by the 'browse with caret' setting
   NS_REGISTER_FIRST_COMMAND(nsSelectMoveScrollCommand, sScrollTopString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollBottomString);
+  NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sMoveTopString);
+		NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sMoveBottomString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sWordPreviousString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sWordNextString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sBeginLineString);
@@ -954,10 +984,10 @@
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sMovePageDownString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollPageUpString);
   NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollPageDownString);
-  NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollLineUpString);
-  NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollLineDownString);
-  NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sScrollLeftString);
-  NS_REGISTER_LAST_COMMAND(nsSelectMoveScrollCommand, sScrollRightString);
+NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sLinePreviousString);
+NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sLineNextString);
+ NS_REGISTER_NEXT_COMMAND(nsSelectMoveScrollCommand, sCharPreviousString);
+  NS_REGISTER_LAST_COMMAND(nsSelectMoveScrollCommand, sCharNextString);
 
   NS_REGISTER_FIRST_COMMAND(nsSelectCommand, sSelectCharPreviousString);
   NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectCharNextString);
@@ -970,6 +1000,8 @@
   // XXX these commands were never implemented. fix me.
   // NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectPagePreviousString);
   // NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectPageNextString);
+  NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectPageUpString);
+  NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectPageDownString);
   NS_REGISTER_NEXT_COMMAND(nsSelectCommand, sSelectTopString);
   NS_REGISTER_LAST_COMMAND(nsSelectCommand, sSelectBottomString);

diff --git a/content/html/content/src/nsHTMLInputElement.cpp b/content/html/content/src/nsHTMLInputElement.cpp
--- a/content/html/content/src/nsHTMLInputElement.cpp	2011-12-21 07:28:12.000000000 +0800
+++ b/content/html/content/src/nsHTMLInputElement.cpp	2011-12-30 23:01:31.000000000 +0800
@@ -2639,6 +2639,12 @@
       NS_ENSURE_SUCCESS(rv, rv);
 
       mControllers->AppendController(controller);
+
+	  	controller = do_CreateInstance("@mozilla.org/editor/editingcontroller;1",
+		&rv);
+		NS_ENSURE_SUCCESS(rv, rv);
+		 
+		mControllers->AppendController(controller);
     }
   }

diff --git a/content/html/content/src/nsHTMLTextAreaElement.cpp b/content/html/content/src/nsHTMLTextAreaElement.cpp
--- a/content/html/content/src/nsHTMLTextAreaElement.cpp	2011-12-21 07:28:13.000000000 +0800
+++ b/content/html/content/src/nsHTMLTextAreaElement.cpp	2011-12-30 23:02:08.000000000 +0800
@@ -798,6 +798,12 @@
       return rv;
 
     mControllers->AppendController(controller);
+
+	controller = do_CreateInstance("@mozilla.org/editor/editingcontroller;1", &rv);
+		if (NS_FAILED(rv))
+		return rv;
+		 
+		mControllers->AppendController(controller);
   }
 
   *aResult = mControllers;
diff --git a/layout/build/nsLayoutModule.cpp b/layout/build/nsLayoutModule.cpp
--- a/layout/build/nsLayoutModule.cpp	2011-12-21 07:28:26.000000000 +0800
+++ b/layout/build/nsLayoutModule.cpp	2011-12-30 23:25:58.000000000 +0800
@@ -155,60 +155,16 @@
 #define NS_EDITORCOMMANDTABLE_CID \
 { 0x4f5e62b8, 0xd659, 0x4156, { 0x84, 0xfc, 0x2f, 0x60, 0x99, 0x40, 0x03, 0x69 }}
 
+#define NS_EDITINGCOMMANDTABLE_CID \
+		{ 0xcb38a746, 0xbeb8, 0x43f3, { 0x94, 0x29, 0x77, 0x96, 0xe1, 0xa9, 0x3f, 0xb4 }}
+
 #define NS_HAPTICFEEDBACK_CID \
 { 0x1f15dbc8, 0xbfaa, 0x45de, \
 { 0x8a, 0x46, 0x08, 0xe2, 0xe2, 0x63, 0x26, 0xb0 } }
 
-static NS_DEFINE_CID(kEditorCommandTableCID, NS_EDITORCOMMANDTABLE_CID);
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsPlaintextEditor)
 
-// Constructor of a controller which is set up to use, internally, a
-// singleton command-table pre-filled with editor commands.
-static nsresult
-nsEditorControllerConstructor(nsISupports *aOuter, REFNSIID aIID,
-                                            void **aResult)
-{
-  nsresult rv;
-  nsCOMPtr<nsIController> controller = do_CreateInstance("@mozilla.org/embedcomp/base-command-controller;1", &rv);
-  if (NS_FAILED(rv)) return rv;
-
-  nsCOMPtr<nsIControllerCommandTable> editorCommandTable = do_GetService(kEditorCommandTableCID, &rv);
-  if (NS_FAILED(rv)) return rv;
-  
-  // this guy is a singleton, so make it immutable
-  editorCommandTable->MakeImmutable();
-  
-  nsCOMPtr<nsIControllerContext> controllerContext = do_QueryInterface(controller, &rv);
-  if (NS_FAILED(rv)) return rv;
-  
-  rv = controllerContext->Init(editorCommandTable);
-  if (NS_FAILED(rv)) return rv;
-  
-  return controller->QueryInterface(aIID, aResult);
-}
-
-
-// Constructor for a command-table pref-filled with editor commands
-static nsresult
-nsEditorCommandTableConstructor(nsISupports *aOuter, REFNSIID aIID,
-                                            void **aResult)
-{
-  nsresult rv;
-  nsCOMPtr<nsIControllerCommandTable> commandTable =
-      do_CreateInstance(NS_CONTROLLERCOMMANDTABLE_CONTRACTID, &rv);
-  if (NS_FAILED(rv)) return rv;
-  
-  rv = nsEditorController::RegisterEditorCommands(commandTable);
-  if (NS_FAILED(rv)) return rv;
-  
-  // we don't know here whether we're being created as an instance,
-  // or a service, so we can't become immutable
-
-  return commandTable->QueryInterface(aIID, aResult);
-}
-
-
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsTextServicesDocument)
 #ifdef ENABLE_EDITOR_API_LOG
 #include "nsHTMLEditorLog.h"
@@ -245,8 +201,6 @@
  { /* 0DE2FBFA-6B7F-11D7-BBBA-0003938A9D96 */        \
   0x0DE2FBFA, 0x6B7F, 0x11D7, {0xBB, 0xBA, 0x00, 0x03, 0x93, 0x8A, 0x9D, 0x96} }
 
-static NS_DEFINE_CID(kWindowCommandTableCID, NS_WINDOWCOMMANDTABLE_CID);
-
 #include "nsIBoxObject.h"
 
 #ifdef MOZ_XUL
@@ -638,45 +592,7 @@
 }
 #endif
 
-static nsresult
-CreateWindowCommandTableConstructor(nsISupports *aOuter,
-                                    REFNSIID aIID, void **aResult)
-{
-  nsresult rv;
-  nsCOMPtr<nsIControllerCommandTable> commandTable =
-      do_CreateInstance(NS_CONTROLLERCOMMANDTABLE_CONTRACTID, &rv);
-  if (NS_FAILED(rv)) return rv;
-
-  rv = nsWindowCommandRegistration::RegisterWindowCommands(commandTable);
-  if (NS_FAILED(rv)) return rv;
-
-  return commandTable->QueryInterface(aIID, aResult);
-}
-
-static nsresult
-CreateWindowControllerWithSingletonCommandTable(nsISupports *aOuter,
-                                      REFNSIID aIID, void **aResult)
-{
-  nsresult rv;
-  nsCOMPtr<nsIController> controller =
-       do_CreateInstance("@mozilla.org/embedcomp/base-command-controller;1", &rv);
 
- if (NS_FAILED(rv)) return rv;
-
-  nsCOMPtr<nsIControllerCommandTable> windowCommandTable = do_GetService(kWindowCommandTableCID, &rv);
-  if (NS_FAILED(rv)) return rv;
-
-  // this is a singleton; make it immutable
-  windowCommandTable->MakeImmutable();
-
-  nsCOMPtr<nsIControllerContext> controllerContext = do_QueryInterface(controller, &rv);
-  if (NS_FAILED(rv)) return rv;
-
-  controllerContext->Init(windowCommandTable);
-  if (NS_FAILED(rv)) return rv;
-
-  return controller->QueryInterface(aIID, aResult);
-}
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsDOMScriptObjectFactory)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsBaseDOMException)
@@ -820,7 +736,9 @@
 NS_DEFINE_NAMED_CID(NS_HTMLEDITOR_CID);
 #endif
 NS_DEFINE_NAMED_CID(NS_EDITORCONTROLLER_CID);
+NS_DEFINE_NAMED_CID(NS_EDITINGCONTROLLER_CID);
 NS_DEFINE_NAMED_CID(NS_EDITORCOMMANDTABLE_CID);
+NS_DEFINE_NAMED_CID(NS_EDITINGCOMMANDTABLE_CID);
 NS_DEFINE_NAMED_CID(NS_TEXTSERVICESDOCUMENT_CID);
 NS_DEFINE_NAMED_CID(NS_GEOLOCATION_SERVICE_CID);
 NS_DEFINE_NAMED_CID(NS_GEOLOCATION_CID);
@@ -849,6 +767,134 @@
 NS_DEFINE_NAMED_CID(NS_HAPTICFEEDBACK_CID);
 #endif
 
+static nsresult
+		CreateWindowCommandTableConstructor(nsISupports *aOuter,
+		REFNSIID aIID, void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIControllerCommandTable> commandTable =
+		do_CreateInstance(NS_CONTROLLERCOMMANDTABLE_CONTRACTID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		rv = nsWindowCommandRegistration::RegisterWindowCommands(commandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		return commandTable->QueryInterface(aIID, aResult);
+		}
+		 
+		static nsresult
+		CreateWindowControllerWithSingletonCommandTable(nsISupports *aOuter,
+		REFNSIID aIID, void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIController> controller =
+		do_CreateInstance("@mozilla.org/embedcomp/base-command-controller;1", &rv);
+		 
+		if (NS_FAILED(rv)) return rv;
+		 
+		nsCOMPtr<nsIControllerCommandTable> windowCommandTable = do_GetService(kNS_WINDOWCOMMANDTABLE_CID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		// this is a singleton; make it immutable
+		windowCommandTable->MakeImmutable();
+		 
+		nsCOMPtr<nsIControllerContext> controllerContext = do_QueryInterface(controller, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		controllerContext->Init(windowCommandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		return controller->QueryInterface(aIID, aResult);
+		}
+		 
+		// Constructor of a controller which is set up to use, internally, a
+		// singleton command-table pre-filled with editor commands.
+		static nsresult
+		nsEditorControllerConstructor(nsISupports *aOuter, REFNSIID aIID,
+		void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIController> controller = do_CreateInstance("@mozilla.org/embedcomp/base-command-controller;1", &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		nsCOMPtr<nsIControllerCommandTable> editorCommandTable = do_GetService(kNS_EDITORCOMMANDTABLE_CID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		// this guy is a singleton, so make it immutable
+		editorCommandTable->MakeImmutable();
+		 
+		nsCOMPtr<nsIControllerContext> controllerContext = do_QueryInterface(controller, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		rv = controllerContext->Init(editorCommandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		return controller->QueryInterface(aIID, aResult);
+		}
+		 
+		// Constructor of a controller which is set up to use, internally, a
+		// singleton command-table pre-filled with editing commands.
+		static nsresult
+		nsEditingControllerConstructor(nsISupports *aOuter, REFNSIID aIID,
+		void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIController> controller = do_CreateInstance("@mozilla.org/embedcomp/base-command-controller;1", &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		nsCOMPtr<nsIControllerCommandTable> editingCommandTable = do_GetService(kNS_EDITINGCOMMANDTABLE_CID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		// this guy is a singleton, so make it immutable
+		editingCommandTable->MakeImmutable();
+		 
+		nsCOMPtr<nsIControllerContext> controllerContext = do_QueryInterface(controller, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		rv = controllerContext->Init(editingCommandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		return controller->QueryInterface(aIID, aResult);
+		}
+		 
+		// Constructor for a command-table pre-filled with editor commands
+		static nsresult
+		nsEditorCommandTableConstructor(nsISupports *aOuter, REFNSIID aIID,
+		void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIControllerCommandTable> commandTable =
+		do_CreateInstance(NS_CONTROLLERCOMMANDTABLE_CONTRACTID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		rv = nsEditorController::RegisterEditorCommands(commandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		// we don't know here whether we're being created as an instance,
+		// or a service, so we can't become immutable
+		 
+		return commandTable->QueryInterface(aIID, aResult);
+		}
+		 
+		// Constructor for a command-table pre-filled with editing commands
+		static nsresult
+		nsEditingCommandTableConstructor(nsISupports *aOuter, REFNSIID aIID,
+		void **aResult)
+		{
+		nsresult rv;
+		nsCOMPtr<nsIControllerCommandTable> commandTable =
+		do_CreateInstance(NS_CONTROLLERCOMMANDTABLE_CONTRACTID, &rv);
+		if (NS_FAILED(rv)) return rv;
+		 
+		rv = nsEditorController::RegisterEditingCommands(commandTable);
+		if (NS_FAILED(rv)) return rv;
+		 
+		// we don't know here whether we're being created as an instance,
+		// or a service, so we can't become immutable
+		 
+		return commandTable->QueryInterface(aIID, aResult);
+		}
+
 static const mozilla::Module::CIDEntry kLayoutCIDs[] = {
   XPCONNECT_CIDENTRIES
 #ifdef DEBUG
@@ -953,7 +999,9 @@
   { &kNS_HTMLEDITOR_CID, false, NULL, nsHTMLEditorConstructor },
 #endif
   { &kNS_EDITORCONTROLLER_CID, false, NULL, nsEditorControllerConstructor },
+	{ &kNS_EDITINGCONTROLLER_CID, false, NULL, nsEditingControllerConstructor },
   { &kNS_EDITORCOMMANDTABLE_CID, false, NULL, nsEditorCommandTableConstructor },
+	{ &kNS_EDITINGCOMMANDTABLE_CID, false, NULL, nsEditingCommandTableConstructor },
   { &kNS_TEXTSERVICESDOCUMENT_CID, false, NULL, nsTextServicesDocumentConstructor },
   { &kNS_GEOLOCATION_SERVICE_CID, false, NULL, nsGeolocationServiceConstructor },
   { &kNS_GEOLOCATION_CID, false, NULL, nsGeolocationConstructor },
@@ -1080,7 +1128,7 @@
   { "@mozilla.org/editor/htmleditor;1", &kNS_HTMLEDITOR_CID },
 #endif
   { "@mozilla.org/editor/editorcontroller;1", &kNS_EDITORCONTROLLER_CID },
-  { "", &kNS_EDITORCOMMANDTABLE_CID },
+{ "@mozilla.org/editor/editingcontroller;1", &kNS_EDITINGCONTROLLER_CID },
   { "@mozilla.org/textservices/textservicesdocument;1", &kNS_TEXTSERVICESDOCUMENT_CID },
   { "@mozilla.org/geolocation/service;1", &kNS_GEOLOCATION_SERVICE_CID },
   { "@mozilla.org/geolocation;1", &kNS_GEOLOCATION_CID },

diff --git a/content/xbl/builtin/emacs/platformHTMLBindings.xml b/content/xbl/builtin/emacs/platformHTMLBindings.xml
--- a/content/xbl/builtin/emacs/platformHTMLBindings.xml	2011-12-21 07:28:13.000000000 +0800
+++ b/content/xbl/builtin/emacs/platformHTMLBindings.xml	2011-12-30 23:03:44.000000000 +0800
@@ -169,8 +169,8 @@
       <handler event="keypress" keycode="VK_INSERT" modifiers="control" command="cmd_copy" /> 
       <handler event="keypress" keycode="VK_HOME" command="cmd_beginLine"/>
       <handler event="keypress" keycode="VK_END" command="cmd_endLine"/>
-      <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_scrollTop"/>
-      <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_scrollBottom"/>
+	  <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_moveTop"/>
+	  <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_moveBottom"/>
       <handler event="keypress" keycode="VK_HOME" modifiers="shift,control" command="cmd_selectTop" /> 
       <handler event="keypress" keycode="VK_END" modifiers="shift,control" command="cmd_selectBottom" />



diff --git a/content/xbl/builtin/mac/platformHTMLBindings.xml b/content/xbl/builtin/mac/platformHTMLBindings.xml
--- a/content/xbl/builtin/mac/platformHTMLBindings.xml	2011-12-21 07:28:13.000000000 +0800
+++ b/content/xbl/builtin/mac/platformHTMLBindings.xml	2011-12-30 23:04:26.000000000 +0800
@@ -106,8 +106,8 @@
       <handler event="keypress" keycode="VK_RIGHT" modifiers="shift" command="cmd_selectCharNext" />
       <handler event="keypress" keycode="VK_UP" modifiers="shift" command="cmd_selectLinePrevious" />
       <handler event="keypress" keycode="VK_DOWN" modifiers="shift" command="cmd_selectLineNext" />
-      <handler event="keypress" keycode="VK_UP" modifiers="accel" command="cmd_scrollTop"/>
-      <handler event="keypress" keycode="VK_DOWN" modifiers="accel" command="cmd_scrollBottom"/>      
+      <handler event="keypress" keycode="VK_UP" modifiers="accel" command="cmd_moveTop"/>
+      <handler event="keypress" keycode="VK_DOWN" modifiers="accel" command="cmd_moveBottom"/>
 	</handlers>
   </binding>

diff --git a/content/xbl/builtin/unix/platformHTMLBindings.xml b/content/xbl/builtin/unix/platformHTMLBindings.xml
--- a/content/xbl/builtin/unix/platformHTMLBindings.xml	2011-12-21 07:28:13.000000000 +0800
+++ b/content/xbl/builtin/unix/platformHTMLBindings.xml	2011-12-30 23:04:53.000000000 +0800
@@ -41,8 +41,8 @@
       <handler event="keypress" keycode="VK_INSERT" modifiers="control" command="cmd_copy" /> 
       <handler event="keypress" keycode="VK_HOME" command="cmd_beginLine"/>
       <handler event="keypress" keycode="VK_END" command="cmd_endLine"/>
-      <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_scrollTop"/>
-      <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_scrollBottom"/>
+      <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_moveTop"/>
+      <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_moveBottom"/>
       <handler event="keypress" keycode="VK_HOME" modifiers="shift,control" command="cmd_selectTop" /> 
       <handler event="keypress" keycode="VK_END" modifiers="shift,control" command="cmd_selectBottom" />



diff --git a/content/xbl/builtin/win/platformHTMLBindings.xml b/content/xbl/builtin/win/platformHTMLBindings.xml
--- a/content/xbl/builtin/win/platformHTMLBindings.xml	2011-12-21 07:28:13.000000000 +0800
+++ b/content/xbl/builtin/win/platformHTMLBindings.xml	2011-12-30 23:05:23.000000000 +0800
@@ -101,8 +101,8 @@
       <handler event="keypress" keycode="VK_INSERT" modifiers="control" command="cmd_copy"/>
       <handler event="keypress" keycode="VK_HOME" command="cmd_beginLine"/>
       <handler event="keypress" keycode="VK_END" command="cmd_endLine"/>
-      <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_scrollTop"/>
-      <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_scrollBottom"/>
+      <handler event="keypress" keycode="VK_HOME" modifiers="control" command="cmd_moveTop"/>
+      <handler event="keypress" keycode="VK_END" modifiers="control" command="cmd_moveBottom"/>
       <handler event="keypress" keycode="VK_HOME" modifiers="shift,control" command="cmd_selectTop" />
       <handler event="keypress" keycode="VK_END" modifiers="shift,control" command="cmd_selectBottom" />
 
