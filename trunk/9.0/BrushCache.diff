--- a/gfx/cairo/cairo/src/cairo-d2d-private.h
+++ b/gfx/cairo/cairo/src/cairo-d2d-private.h
@@ -77,12 +77,66 @@
 const unsigned int TEXT_TEXTURE_HEIGHT = 512;
 typedef struct _cairo_d2d_device cairo_d2d_device_t;
 
+struct _cairo_d2d_surface;
+typedef struct _cairo_d2d_surface cairo_d2d_surface_t;
+
+class _GradientCache
+{
+public:
+    enum {
+        Linear, Radial,
+    };
+
+    _GradientCache(cairo_d2d_surface_t* _d2dsurf, int Style);
+    ~_GradientCache(void);
+
+    RefPtr<ID2D1Brush> _GradientCache::Create(
+        void* const GradientBrushProperties,
+        const D2D1_BRUSH_PROPERTIES& BrushProperties,
+        const UINT StopCount,
+        D2D1_GRADIENT_STOP* const GradientStops);
+
+private:
+    struct _Cache {
+        RefPtr<ID2D1Brush> Brush;
+        UINT StopCount;
+        D2D1_GRADIENT_STOP* GradientStops;
+    };
+    static const UINT MaxCache = 256;
+    cairo_d2d_surface_t* d2dsurf;
+    _Cache* Cache;
+    _Cache* CacheIdx;
+    _Cache* MaxCacheIdx;
+    RefPtr<ID2D1Brush> (_GradientCache::*pCreateGradientBrush)(void* const, const D2D1_BRUSH_PROPERTIES&, ID2D1GradientStopCollection*);
+    RefPtr<ID2D1Brush> (_GradientCache::*pSetPropertiesGradientBrush)(_Cache* const, void* const, const D2D1_BRUSH_PROPERTIES&);
+
+    RefPtr<ID2D1Brush> CreateLinearGradientBrush(
+        void* const GradientBrushProperties,
+        const D2D1_BRUSH_PROPERTIES& BrushProperties,
+        ID2D1GradientStopCollection* GradientStopCollection);
+    RefPtr<ID2D1Brush> CreateRadialGradientBrush(
+        void* const GradientBrushProperties,
+        const D2D1_BRUSH_PROPERTIES& BrushProperties,
+        ID2D1GradientStopCollection* GradientStopCollection);
+    RefPtr<ID2D1Brush> SetPropertiesLinearGradientBrush(
+        _Cache* const Pnt,
+        void* const GradientBrushProperties,
+        const D2D1_BRUSH_PROPERTIES& BrushProperties);
+    RefPtr<ID2D1Brush> SetPropertiesRadialGradientBrush(
+        _Cache* const Pnt,
+        void* const GradientBrushProperties,
+        const D2D1_BRUSH_PROPERTIES& BrushProperties);
+};
+
 struct _cairo_d2d_surface {
     _cairo_d2d_surface() : d2d_clip(NULL), clipping(false), isDrawing(false),
             textRenderingState(TEXT_RENDERING_UNINITIALIZED)
     {
 	_cairo_clip_init (&this->clip);
         cairo_list_init(&this->dependent_surfaces);
+
+        LinearGradientCache = new _GradientCache(this, _GradientCache::Linear);
+        RadialGradientCache = new _GradientCache(this, _GradientCache::Radial);
     }
     
     ~_cairo_d2d_surface();
@@ -152,8 +206,10 @@
     // no longer be what it was when the drawing command was issued.
     cairo_list_t dependent_surfaces;
     //cairo_surface_clipper_t clipper;
+
+    _GradientCache* LinearGradientCache;
+    _GradientCache* RadialGradientCache;
 };
-typedef struct _cairo_d2d_surface cairo_d2d_surface_t;
 
 struct _cairo_d2d_surface_entry
 {
--- a/gfx/cairo/cairo/src/cairo-d2d-surface.cpp
+++ b/gfx/cairo/cairo/src/cairo-d2d-surface.cpp
@@ -48,6 +48,161 @@
 
 #define CAIRO_INT_STATUS_SUCCESS (cairo_int_status_t)CAIRO_STATUS_SUCCESS
 
+inline
+_GradientCache::_GradientCache(cairo_d2d_surface_t* _d2dsurf, int Style)
+{
+    d2dsurf = _d2dsurf;
+
+    switch(Style) {
+    case Linear:
+        pCreateGradientBrush = &_GradientCache::CreateLinearGradientBrush;
+        pSetPropertiesGradientBrush = &_GradientCache::SetPropertiesLinearGradientBrush;
+        break;
+    case Radial:
+        pCreateGradientBrush = &_GradientCache::CreateRadialGradientBrush;
+        pSetPropertiesGradientBrush = &_GradientCache::SetPropertiesRadialGradientBrush;
+        break;
+    }
+
+    Cache = NULL;
+}
+
+inline
+_GradientCache::~_GradientCache(void)
+{
+    if(Cache) {
+        for(_Cache* Idx = Cache; Idx < MaxCacheIdx; Idx++) {
+            if(Idx->Brush) {
+                delete[] Idx->GradientStops;
+            } else {
+                break;
+            }
+        }
+
+        delete[] Cache;
+    }
+}
+
+inline RefPtr<ID2D1Brush>
+_GradientCache::Create(
+    void* const GradientBrushProperties,
+    const D2D1_BRUSH_PROPERTIES& BrushProperties,
+    const UINT StopCount,
+    D2D1_GRADIENT_STOP* const GradientStops)
+{
+    if(Cache == NULL) {
+        Cache = new _Cache[MaxCache];
+        CacheIdx = Cache;
+        MaxCacheIdx = Cache + MaxCache;
+    }
+
+    const size_t SizeGradientStops = StopCount * sizeof(D2D1_GRADIENT_STOP);
+
+    for(UINT Idx = 0; Idx < MaxCache; Idx++) {
+        _Cache* const Pnt = CacheIdx >= Cache + Idx ? CacheIdx - Idx : CacheIdx + MaxCache - Idx;
+
+        if(Pnt->Brush) {
+            if((Pnt->StopCount == StopCount) && (memcmp(Pnt->GradientStops, GradientStops, SizeGradientStops) == 0)) {
+                return (this->*pSetPropertiesGradientBrush)(Pnt, GradientBrushProperties, BrushProperties);
+            }
+        } else {
+            break;
+        }
+    }
+
+    RefPtr<ID2D1GradientStopCollection> GradientStopCollection;
+
+    d2dsurf->rt->CreateGradientStopCollection(GradientStops, StopCount, &GradientStopCollection);
+
+    RefPtr<ID2D1Brush> Brush = (this->*pCreateGradientBrush)(GradientBrushProperties, BrushProperties, GradientStopCollection);
+
+    if(CacheIdx->Brush) {
+        CacheIdx = ++CacheIdx < MaxCacheIdx ? CacheIdx : Cache;
+        if(CacheIdx->Brush) delete[] CacheIdx->GradientStops;
+    }
+
+    CacheIdx->Brush = Brush;
+    CacheIdx->StopCount = StopCount;
+    CacheIdx->GradientStops = new D2D1_GRADIENT_STOP[StopCount];
+    memcpy(CacheIdx->GradientStops, GradientStops, SizeGradientStops);
+
+    return Brush;
+}
+
+RefPtr<ID2D1Brush>
+_GradientCache::CreateLinearGradientBrush(
+    void* const GradientBrushProperties,
+    const D2D1_BRUSH_PROPERTIES& BrushProperties,
+    ID2D1GradientStopCollection* GradientStopCollection)
+{
+    RefPtr<ID2D1LinearGradientBrush> LinearGradientBrush;
+
+    d2dsurf->rt->CreateLinearGradientBrush(
+        *static_cast<D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*>(GradientBrushProperties),
+        BrushProperties,
+        GradientStopCollection,
+        &LinearGradientBrush);
+
+    return LinearGradientBrush;
+}
+
+RefPtr<ID2D1Brush>
+_GradientCache::CreateRadialGradientBrush(
+    void* const GradientBrushProperties,
+    const D2D1_BRUSH_PROPERTIES& BrushProperties,
+    ID2D1GradientStopCollection* GradientStopCollection)
+{
+    RefPtr<ID2D1RadialGradientBrush> RadialGradientBrush;
+
+    d2dsurf->rt->CreateRadialGradientBrush(
+        *static_cast<D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*>(GradientBrushProperties),
+        BrushProperties,
+        GradientStopCollection,
+        &RadialGradientBrush);
+
+    return RadialGradientBrush;
+}
+
+RefPtr<ID2D1Brush>
+_GradientCache::SetPropertiesLinearGradientBrush(
+    _Cache* const Pnt,
+    void* const GradientBrushProperties,
+    const D2D1_BRUSH_PROPERTIES& BrushProperties)
+{
+    RefPtr<ID2D1LinearGradientBrush> LinearGradientBrush = static_cast<ID2D1LinearGradientBrush*>(Pnt->Brush.get());
+    const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* const LinearGradientBrushProperties =
+        static_cast<D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*>(GradientBrushProperties);
+
+    LinearGradientBrush->SetStartPoint(LinearGradientBrushProperties->startPoint);
+    LinearGradientBrush->SetEndPoint(LinearGradientBrushProperties->endPoint);
+
+    LinearGradientBrush->SetOpacity(BrushProperties.opacity);
+    LinearGradientBrush->SetTransform(BrushProperties.transform);
+
+    return LinearGradientBrush;
+}
+
+RefPtr<ID2D1Brush>
+_GradientCache::SetPropertiesRadialGradientBrush(
+    _Cache* const Pnt,
+    void* const GradientBrushProperties,
+    const D2D1_BRUSH_PROPERTIES& BrushProperties)
+{
+    RefPtr<ID2D1RadialGradientBrush> RadialGradientBrush = static_cast<ID2D1RadialGradientBrush*>(Pnt->Brush.get());
+    const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* const RadialGradientBrushProperties =
+        static_cast<D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*>(GradientBrushProperties);
+
+    RadialGradientBrush->SetCenter(RadialGradientBrushProperties->center);
+    RadialGradientBrush->SetGradientOriginOffset(RadialGradientBrushProperties->gradientOriginOffset);
+    RadialGradientBrush->SetRadiusX(RadialGradientBrushProperties->radiusX);
+    RadialGradientBrush->SetRadiusY(RadialGradientBrushProperties->radiusY);
+
+    RadialGradientBrush->SetOpacity(BrushProperties.opacity);
+    RadialGradientBrush->SetTransform(BrushProperties.transform);
+
+    return RadialGradientBrush;
+}
+
 struct Vertex
 {
     float position[2];
@@ -1519,17 +1674,12 @@
 	return NULL;
     }
 
-    RefPtr<ID2D1GradientStopCollection> stopCollection;
-    d2dsurf->rt->CreateGradientStopCollection(stops, num_stops, &stopCollection);
-    RefPtr<ID2D1RadialGradientBrush> brush;
-
-    d2dsurf->rt->CreateRadialGradientBrush(D2D1::RadialGradientBrushProperties(center,
-									       origin,
-									       outer_radius,
-									       outer_radius),
-					   brushProps,
-					   stopCollection,
-					   &brush);
+    RefPtr<ID2D1Brush> brush = d2dsurf->RadialGradientCache->Create(
+        &D2D1::RadialGradientBrushProperties(center, origin, outer_radius, outer_radius),
+        brushProps,
+        num_stops,
+        stops);
+
     delete [] stops;
     return brush;
 }
@@ -1681,14 +1831,13 @@
 	stops[source_pattern->base.n_stops + 1].position = 1.0f;
 	stops[source_pattern->base.n_stops + 1].color = D2D1::ColorF(0, 0);
     }
-    RefPtr<ID2D1GradientStopCollection> stopCollection;
-    d2dsurf->rt->CreateGradientStopCollection(stops, num_stops, &stopCollection);
-    RefPtr<ID2D1LinearGradientBrush> brush;
-    d2dsurf->rt->CreateLinearGradientBrush(D2D1::LinearGradientBrushProperties(D2D1::Point2F((FLOAT)p1.x, (FLOAT)p1.y),
-									       D2D1::Point2F((FLOAT)p2.x, (FLOAT)p2.y)),
-					   brushProps,
-					   stopCollection,
-					   &brush);
+
+    RefPtr<ID2D1Brush> brush = d2dsurf->LinearGradientCache->Create(
+        &D2D1::LinearGradientBrushProperties(D2D1::Point2F((FLOAT)p1.x, (FLOAT)p1.y), D2D1::Point2F((FLOAT)p2.x, (FLOAT)p2.y)),
+        brushProps,
+        num_stops,
+        stops);
+
     delete [] stops;
     return brush;
 }
@@ -2353,6 +2502,9 @@
     
 _cairo_d2d_surface::~_cairo_d2d_surface()
 {
+    delete RadialGradientCache;
+    delete LinearGradientCache;
+
     _cairo_d2d_surface_entry *entry, *next;
     cairo_list_foreach_entry_safe(entry, next, _cairo_d2d_surface_entry, &dependent_surfaces, link) {
 	// We do not need to flush, the contents of our texture has not changed,
